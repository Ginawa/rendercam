
local rendercam = require "main.rendercam.rendercam"
local IDENTITY_MATRIX = vmath.matrix4()


local function update_window(self)
	print("Render - update window")
	rendercam.update_window(render.get_window_width(), render.get_window_height())
end

function init(self)
	print("Render script init")
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.model_pred = render.predicate({"model"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(0.1, 0.1, 0.1, 0)

    self.view = IDENTITY_MATRIX
	self.projection = IDENTITY_MATRIX

	rendercam.update_winSize(render.get_window_width(), render.get_window_height())
	self.first = true
end

function update(self)
	-- grab latest view and projection matrices from module
	self.view = rendercam.calculate_view()
	self.projection = rendercam.calculate_proj()
	local x, y = rendercam.viewportOffset.x, rendercam.viewportOffset.y
	render.set_viewport(x, y, render.get_window_width() - x * 2, render.get_window_height() - y * 2)

	if self.first then print("####  RENDER SCRIPT FIRST UPDATE  ####\n") self.first = false end

    render.set_depth_mask(true)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	render.set_view(self.view)
	render.set_projection(self.projection)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)

	render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_pred)
    render.draw_debug3d()

    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

	render.disable_state(render.STATE_CULL_FACE)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)

    render.set_depth_mask(false)
    render.draw_debug2d()
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
		-- this will never be recieved, no actual camera components in use.
	elseif message_id == hash("window_resized") then
		-- currently getting window width/height every update (multiple times)
		print("  ----------------  window resized  ----------------")
		update_window(self)
    end
end
