
local rendercam = require "rendercam.rendercam"

local mouse_spos = vmath.vector3() -- screen pos
local mouse_wpos = vmath.vector3() -- world pos

local zstep = 10
local panning = false

local orbit_cam_speed = 0.3


function update(self, dt)
	go.set_rotation(vmath.quat_rotation_y(self.orbitCamAngle), "orbit pivot")
	self.orbitCamAngle = self.orbitCamAngle + orbit_cam_speed * dt
end

function init(self)
	msg.post(".", "acquire_input_focus")
	go.set("logo#sprite", "tint.w", 0.2)
	self.orbitCamAngle = 0
	rendercam.follow(go.get_id("character"), true, go.get_id("camera"))
end

function on_input(self, action_id, action)
	if action_id == nil then
		mouse_spos.x = action.screen_x;  mouse_spos.y = action.screen_y

		mouse_wpos = rendercam.screen_to_world_2d(mouse_spos.x, mouse_spos.y)
		msg.post("cursor/main#script", "update pos", {pos = mouse_wpos})

		if panning then
			local dv = -rendercam.screen_to_world_2d(action.screen_dx, action.screen_dy, true)
			rendercam.pan(dv.x, dv.y)
		end

	elseif action_id == hash("mouse wheel up") then
		rendercam.zoom(-zstep)

	elseif action_id == hash("mouse wheel down") then
		rendercam.zoom(zstep)

	elseif action_id == hash("middle click") then
		if action.pressed then
			panning = true
		elseif action.released then
			panning = false
		end

	elseif action_id == hash("space") and action.pressed then
		self.long = not self.long
		rendercam.shake(self.long and 10 or 30, self.long and 4 or 0.3)
		local angle = math.random() * math.pi * 2
		--rendercam.recoil(vmath.vector3(math.cos(angle) * 0, math.sin(angle) * 0, 50), 0.9)

	elseif action_id == hash("enter") and action.pressed then
		go.set_position(vmath.vector3(-500, -500, 900), "camera")

	elseif action_id == hash("1") and action.pressed then
		rendercam.activate_camera(go.get_id("camera"))

	elseif action_id == hash("2") and action.pressed then
		rendercam.activate_camera(go.get_id("camera2"))

	elseif action_id == hash("3") and action.pressed then
		rendercam.activate_camera(go.get_id("camera3"))

	elseif action_id == hash("escape") then
		msg.post("@system:", "exit", {code = 0})
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end
